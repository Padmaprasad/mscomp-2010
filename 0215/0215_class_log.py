# IPython log file

get_ipython().magic("run -d -b65 error.py ")
get_ipython().system("ls -F -F -o --color ")
get_ipython().system("ls -F -F -o --color ")
get_ipython().system("ls -F -F -o --color ")
import sympy as sym
s=sym
x
x + 2*y -3 *z**2
y
z
x, y, z = s.symbols('x y z')
s.vars('a b c')
s.var('a b c')
#[Out]# (a, b, c)
a+b
#[Out]# a + b
#?s.symbols
#?s.Symbol
x**2+4
#[Out]# 4 + x**2
(x**2+y**3)**6
#[Out]# (x**2 + y**3)**6
_21.expand()
#[Out]# 6*x**10*y**3 + 15*x**8*y**6 + 20*x**6*y**9 + x**12 + 15*x**4*y**12 + 6*x**2*y**15 + y**18
s.pprint(_22)
s.integrate(1/exp(-1/x**n),x)
n = s.symbol('n')
n = s.symbols('n')
s.integrate(1/exp(-1/x**n),x)
s.integrate(1/s.exp(-1/x**n),x)
#[Out]# Integral(exp(x**(-n)), x)
s.pprint(_28)
s.latex (_28)
#[Out]# '$\\int e^{x^{- n}}\\,dx$'
print(s.latex (_28))
a = 'Hola \x'
a = 'Hola \n'
a = 'Hola \n mundo'
print(a)
a = 'Hola \\n mundo'
print(a)
s.latex (_28)
#[Out]# '$\\int e^{x^{- n}}\\,dx$'
print(s.latex (_28))
a = r'Hola \n mundo'
print(a)
plot([1,2,3])
#[Out]# [<matplotlib.lines.Line2D object at 0xa6d676c>]
title(r'$x=\sum_i^n \gamma_i$')
#[Out]# <matplotlib.text.Text object at 0xa82e18c>
s.latex (_28)
#[Out]# '$\\int e^{x^{- n}}\\,dx$'
print(s.latex (_28))
s.pprint(_28)
num = (x**2+y**3)**6
s.expand(num)
#[Out]# 6*x**10*y**3 + 15*x**8*y**6 + 20*x**6*y**9 + x**12 + 15*x**4*y**12 + 6*x**2*y**15 + y**18
from sympy import *
#?sin
from numpy import *
#?sin
from numpy import *
from sympy import *
#?sin
3/4
#[Out]# 0
Rational(3,4) + Rational(4,5)
#[Out]# 31/20
s.Rational(3/4)
#[Out]# 0
s.Integer(3)/4
#[Out]# 3/4
num = (x**2+y**3)**6
(x**2+y**3)**6
#[Out]# (x**2 + y**3)**6
(x**2+y**3)**6/( x**3-z**3)**2
#[Out]# (x**2 + y**3)**6/(x**3 - z**3)**2
s.expand((x**2+y**3)**6/( x**3-z**3)**2)
#[Out]# x**12/(-2*x**3*z**3 + x**6 + z**6) + y**18/(-2*x**3*z**3 + x**6 + z**6) + 6*x**2*y**15/(-2*x**3*z**3 + x**6 + z**6) + 6*x**10*y**3/(-2*x**3*z**3 + x**6 + z**6) + 15*x**4*y**12/(-2*x**3*z**3 + x**6 + z**6) + 15*x**8*y**6/(-2*x**3*z**3 + x**6 + z**6) + 20*x**6*y**9/(-2*x**3*z**3 + x**6 + z**6)
a = _
a 
#[Out]# x**12/(-2*x**3*z**3 + x**6 + z**6) + y**18/(-2*x**3*z**3 + x**6 + z**6) + 6*x**2*y**15/(-2*x**3*z**3 + x**6 + z**6) + 6*x**10*y**3/(-2*x**3*z**3 + x**6 + z**6) + 15*x**4*y**12/(-2*x**3*z**3 + x**6 + z**6) + 15*x**8*y**6/(-2*x**3*z**3 + x**6 + z**6) + 20*x**6*y**9/(-2*x**3*z**3 + x**6 + z**6)
#?s.fraction 
a 
#[Out]# x**12/(-2*x**3*z**3 + x**6 + z**6) + y**18/(-2*x**3*z**3 + x**6 + z**6) + 6*x**2*y**15/(-2*x**3*z**3 + x**6 + z**6) + 6*x**10*y**3/(-2*x**3*z**3 + x**6 + z**6) + 15*x**4*y**12/(-2*x**3*z**3 + x**6 + z**6) + 15*x**8*y**6/(-2*x**3*z**3 + x**6 + z**6) + 20*x**6*y**9/(-2*x**3*z**3 + x**6 + z**6)
s.fraction (a)
#[Out]# (x**12/(-2*x**3*z**3 + x**6 + z**6) + y**18/(-2*x**3*z**3 + x**6 + z**6) + 6*x**2*y**15/(-2*x**3*z**3 + x**6 + z**6) + 6*x**10*y**3/(-2*x**3*z**3 + x**6 + z**6) + 15*x**4*y**12/(-2*x**3*z**3 + x**6 + z**6) + 15*x**8*y**6/(-2*x**3*z**3 + x**6 + z**6) + 20*x**6*y**9/(-2*x**3*z**3 + x**6 + z**6), 1)
#?s.together
together(1/x + 1/y)
#[Out]# (x + y)/(x*y)
fraction(together(1/x + 1/y))
#[Out]# (x + y, x*y)
num 
#[Out]# (x**2 + y**3)**6
num 
#[Out]# (x**2 + y**3)**6
num.subs(y,4)
#[Out]# (64 + x**2)**6
#?num.subs
num.subs(y,(z+x)**2)
#[Out]# (x**2 + (x + z)**6)**6
expand(num.subs(y,(z+x)**2))
#[Out]# 90*x**14*z**2 + 630*x**34*z**2 + 990*x**18*z**2 + 2610*x**30*z**2 + 3060*x**22*z**2 + 4140*x**26*z**2 + 120*x**13*z**3 + 3300*x**17*z**3 + 7140*x**33*z**3 + 16320*x**21*z**3 + 24360*x**29*z**3 + 30360*x**25*z**3 + 90*x**12*z**4 + 7425*x**16*z**4 + 58905*x**32*z**4 + 61200*x**20*z**4 + 159390*x**24*z**4 + 164430*x**28*z**4 + 36*x**11*z**5 + 11880*x**15*z**5 + 171360*x**19*z**5 + 376992*x**31*z**5 + 637560*x**23*z**5 + 855036*x**27*z**5 + 6*x**10*z**6 + 13860*x**14*z**6 + 371280*x**18*z**6 + 1947792*x**30*z**6 + 2018940*x**22*z**6 + 3562650*x**26*z**6 + 11880*x**13*z**7 + 636480*x**17*z**7 + 5191560*x**21*z**7 + 8347680*x**29*z**7 + 12214800*x**25*z**7 + 7425*x**12*z**8 + 875160*x**16*z**8 + 11032065*x**20*z**8 + 30260340*x**28*z**8 + 35117550*x**24*z**8 + 3300*x**11*z**9 + 972400*x**15*z**9 + 19612560*x**19*z**9 + 85842900*x**23*z**9 + 94143280*x**27*z**9 + 990*x**10*z**10 + 875160*x**14*z**10 + 29418840*x**18*z**10 + 180270090*x**22*z**10 + 254186856*x**26*z**10 + 180*x**9*z**11 + 636480*x**13*z**11 + 37442160*x**17*z**11 + 327763800*x**21*z**11 + 600805296*x**25*z**11 + x**12 + 15*x**8*z**12 + 371280*x**12*z**12 + 40562340*x**16*z**12 + 518959350*x**20*z**12 + 1251677700*x**24*z**12 + 171360*x**11*z**13 + 37442160*x**15*z**13 + 718559100*x**19*z**13 + 2310789600*x**23*z**13 + 61200*x**10*z**14 + 29418840*x**14*z**14 + 872536050*x**18*z**14 + 3796297200*x**22*z**14 + 36*z*x**15 + 16320*x**9*z**15 + 19612560*x**13*z**15 + 930705120*x**17*z**15 + 5567902560*x**21*z**15 + 6*x**16 + 3060*x**8*z**16 + 11032065*x**12*z**16 + 872536050*x**16*z**16 + 7307872110*x**20*z**16 + 360*x**7*z**17 + 5191560*x**11*z**17 + 718559100*x**15*z**17 + 8597496600*x**19*z**17 + 20*x**6*z**18 + 2018940*x**10*z**18 + 518959350*x**14*z**18 + 9075135300*x**18*z**18 + 180*z*x**19 + 637560*x**9*z**19 + 327763800*x**13*z**19 + 8597496600*x**17*z**19 + 15*x**20 + 159390*x**8*z**20 + 180270090*x**12*z**20 + 7307872110*x**16*z**20 + 30360*x**7*z**21 + 85842900*x**11*z**21 + 5567902560*x**15*z**21 + 4140*x**6*z**22 + 35117550*x**10*z**22 + 3796297200*x**14*z**22 + 360*z*x**23 + 360*x**5*z**23 + 12214800*x**9*z**23 + 2310789600*x**13*z**23 + 20*x**24 + 15*x**4*z**24 + 3562650*x**8*z**24 + 1251677700*x**12*z**24 + 855036*x**7*z**25 + 600805296*x**11*z**25 + 164430*x**6*z**26 + 254186856*x**10*z**26 + 360*z*x**27 + 24360*x**5*z**27 + 94143280*x**9*z**27 + 15*x**28 + 2610*x**4*z**28 + 30260340*x**8*z**28 + 180*x**3*z**29 + 8347680*x**7*z**29 + 6*x**2*z**30 + 1947792*x**6*z**30 + 180*z*x**31 + 376992*x**5*z**31 + 6*x**32 + 58905*x**4*z**32 + 7140*x**3*z**33 + 630*x**2*z**34 + 36*x*z**35 + 36*z*x**35 + x**36 + z**36
simplify(_)
#[Out]# 90*x**14*z**2 + 630*x**34*z**2 + 990*x**18*z**2 + 2610*x**30*z**2 + 3060*x**22*z**2 + 4140*x**26*z**2 + 120*x**13*z**3 + 3300*x**17*z**3 + 7140*x**33*z**3 + 16320*x**21*z**3 + 24360*x**29*z**3 + 30360*x**25*z**3 + 90*x**12*z**4 + 7425*x**16*z**4 + 58905*x**32*z**4 + 61200*x**20*z**4 + 159390*x**24*z**4 + 164430*x**28*z**4 + 36*x**11*z**5 + 11880*x**15*z**5 + 171360*x**19*z**5 + 376992*x**31*z**5 + 637560*x**23*z**5 + 855036*x**27*z**5 + 6*x**10*z**6 + 13860*x**14*z**6 + 371280*x**18*z**6 + 1947792*x**30*z**6 + 2018940*x**22*z**6 + 3562650*x**26*z**6 + 11880*x**13*z**7 + 636480*x**17*z**7 + 5191560*x**21*z**7 + 8347680*x**29*z**7 + 12214800*x**25*z**7 + 7425*x**12*z**8 + 875160*x**16*z**8 + 11032065*x**20*z**8 + 30260340*x**28*z**8 + 35117550*x**24*z**8 + 3300*x**11*z**9 + 972400*x**15*z**9 + 19612560*x**19*z**9 + 85842900*x**23*z**9 + 94143280*x**27*z**9 + 990*x**10*z**10 + 875160*x**14*z**10 + 29418840*x**18*z**10 + 180270090*x**22*z**10 + 254186856*x**26*z**10 + 180*x**9*z**11 + 636480*x**13*z**11 + 37442160*x**17*z**11 + 327763800*x**21*z**11 + 600805296*x**25*z**11 + x**12 + 15*x**8*z**12 + 371280*x**12*z**12 + 40562340*x**16*z**12 + 518959350*x**20*z**12 + 1251677700*x**24*z**12 + 171360*x**11*z**13 + 37442160*x**15*z**13 + 718559100*x**19*z**13 + 2310789600*x**23*z**13 + 61200*x**10*z**14 + 29418840*x**14*z**14 + 872536050*x**18*z**14 + 3796297200*x**22*z**14 + 36*z*x**15 + 16320*x**9*z**15 + 19612560*x**13*z**15 + 930705120*x**17*z**15 + 5567902560*x**21*z**15 + 6*x**16 + 3060*x**8*z**16 + 11032065*x**12*z**16 + 872536050*x**16*z**16 + 7307872110*x**20*z**16 + 360*x**7*z**17 + 5191560*x**11*z**17 + 718559100*x**15*z**17 + 8597496600*x**19*z**17 + 20*x**6*z**18 + 2018940*x**10*z**18 + 518959350*x**14*z**18 + 9075135300*x**18*z**18 + 180*z*x**19 + 637560*x**9*z**19 + 327763800*x**13*z**19 + 8597496600*x**17*z**19 + 15*x**20 + 159390*x**8*z**20 + 180270090*x**12*z**20 + 7307872110*x**16*z**20 + 30360*x**7*z**21 + 85842900*x**11*z**21 + 5567902560*x**15*z**21 + 4140*x**6*z**22 + 35117550*x**10*z**22 + 3796297200*x**14*z**22 + 360*z*x**23 + 360*x**5*z**23 + 12214800*x**9*z**23 + 2310789600*x**13*z**23 + 20*x**24 + 15*x**4*z**24 + 3562650*x**8*z**24 + 1251677700*x**12*z**24 + 855036*x**7*z**25 + 600805296*x**11*z**25 + 164430*x**6*z**26 + 254186856*x**10*z**26 + 360*z*x**27 + 24360*x**5*z**27 + 94143280*x**9*z**27 + 15*x**28 + 2610*x**4*z**28 + 30260340*x**8*z**28 + 180*x**3*z**29 + 8347680*x**7*z**29 + 6*x**2*z**30 + 1947792*x**6*z**30 + 180*z*x**31 + 376992*x**5*z**31 + 6*x**32 + 58905*x**4*z**32 + 7140*x**3*z**33 + 630*x**2*z**34 + 36*x*z**35 + 36*z*x**35 + x**36 + z**36
_.subs({z:1.5, x:3.4})
#[Out]# 7.06698652917230e+24
_79.subs(z:1)
_79.subs(z,1)
#[Out]# 1 + 36*x + 636*x**2 + 7320*x**3 + 61530*x**4 + 401712*x**5 + 2116382*x**6 + 9233436*x**7 + 33985455*x**8 + 107012140*x**9 + 291385542*x**10 + 692014452*x**11 + 1443358651*x**12 + 2658814440*x**13 + 4345564500*x**14 + 6324888136*x**15 + 8221853091*x**16 + 9566283660*x**17 + 9977462460*x**18 + 9335839800*x**19 + 7837924740*x**20 + 5900874240*x**21 + 3978589290*x**22 + 2397270420*x**23 + 1286954660*x**24 + 613050456*x**25 + 257753646*x**26 + 94998676*x**27 + 30424785*x**28 + 8372040*x**29 + 1950402*x**30 + 377172*x**31 + 58911*x**32 + 7140*x**33 + 630*x**34 + 36*x**35 + x**36
#?s.*lm*
#?s.Ylm 
s.Ylm(0,0,x,z)
#[Out]# 1/(2*pi**(1/2))
s.Ylm(3,2,x,z)
#[Out]# 210**(1/2)*sin(x)**2*cos(x)*exp(2*I*z)/(8*pi**(1/2))
#?s.simplify 
_86 
#[Out]# 210**(1/2)*sin(x)**2*cos(x)*exp(2*I*z)/(8*pi**(1/2))
type(_86)
#[Out]# <class 'sympy.core.mul.Mul'>
_86.args
#[Out]# (1/8, 210**(1/2), pi**(-1/2), sin(x)**2, cos(x), exp(2*I*z))
type(_86.args[-1])
#[Out]# exp
_86.args[-1].args
#[Out]# (2*I*z,)
sym.core.add.Add(_86.args)
sym.core.add.Add(*_86.args)
#[Out]# 1/8 + cos(x) + 210**(1/2) + sin(x)**2 + pi**(-1/2) + exp(2*I*z)
_86 
#[Out]# 210**(1/2)*sin(x)**2*cos(x)*exp(2*I*z)/(8*pi**(1/2))
sym.core.add.Add(*_86.args)
#[Out]# 1/8 + cos(x) + 210**(1/2) + sin(x)**2 + pi**(-1/2) + exp(2*I*z)
#?s.Poly
nombre = 
nombre = 'x'
"a_%s = 44" % x
#[Out]# 'a_x = 44'
exec "a_%s = 44" % x
a_x
#[Out]# 44
_79.subs(z,1)
#[Out]# 1 + 36*x + 636*x**2 + 7320*x**3 + 61530*x**4 + 401712*x**5 + 2116382*x**6 + 9233436*x**7 + 33985455*x**8 + 107012140*x**9 + 291385542*x**10 + 692014452*x**11 + 1443358651*x**12 + 2658814440*x**13 + 4345564500*x**14 + 6324888136*x**15 + 8221853091*x**16 + 9566283660*x**17 + 9977462460*x**18 + 9335839800*x**19 + 7837924740*x**20 + 5900874240*x**21 + 3978589290*x**22 + 2397270420*x**23 + 1286954660*x**24 + 613050456*x**25 + 257753646*x**26 + 94998676*x**27 + 30424785*x**28 + 8372040*x**29 + 1950402*x**30 + 377172*x**31 + 58911*x**32 + 7140*x**33 + 630*x**34 + 36*x**35 + x**36
a = s.Poly(_, x)
a 
#[Out]# Poly(x**36 + 36*x**35 + 630*x**34 + 7140*x**33 + 58911*x**32 + 377172*x**31 + 1950402*x**30 + 8372040*x**29 + 30424785*x**28 + 94998676*x**27 + 257753646*x**26 + 613050456*x**25 + 1286954660*x**24 + 2397270420*x**23 + 3978589290*x**22 + 5900874240*x**21 + 7837924740*x**20 + 9335839800*x**19 + 9977462460*x**18 + 9566283660*x**17 + 8221853091*x**16 + 6324888136*x**15 + 4345564500*x**14 + 2658814440*x**13 + 1443358651*x**12 + 692014452*x**11 + 291385542*x**10 + 107012140*x**9 + 33985455*x**8 + 9233436*x**7 + 2116382*x**6 + 401712*x**5 + 61530*x**4 + 7320*x**3 + 636*x**2 + 36*x + 1, x)
a.is_multivariate 
#[Out]# False
a.is_univariate 
#[Out]# True
a.monoms 
#[Out]# ((36,), (35,), (34,), (33,), (32,), (31,), (30,), (29,), (28,), (27,), (26,), (25,), (24,), (23,), (22,), (21,), (20,), (19,), (18,), (17,), (16,), (15,), (14,), (13,), (12,), (11,), (10,), (9,), (8,), (7,), (6,), (5,), (4,), (3,), (2,), (1,), (0,))
#?a.*coef*
get_ipython().system("ls -F ")
get_ipython().magic("run error.py")
get_ipython().magic("debug ")
get_ipython().magic("run error.py")
get_ipython().magic("run -d -b65 error.py")
i = 10
x = 10
'%03i' % x
#[Out]# '010'
'%03d' % x
#[Out]# '010'
